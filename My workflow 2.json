{
  "name": "My workflow 2",
  "nodes": [
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "11b931a6-ed42-4668-bf36-483d0abd1c29",
              "name": "city",
              "value": "={{$node[\"Split Location\"].json[\"city\"]}}",
              "type": "string"
            },
            {
              "id": "7bc9a394-f130-43b0-a44c-6b33202aa8b3",
              "name": "name",
              "value": "={{$node[\"Split Location\"].json[\"name\"]}}",
              "type": "string"
            },
            {
              "id": "36db596c-5501-4679-a7ef-41a916ad58ee",
              "name": "listId",
              "value": "={{$node[\"Split Location\"].json[\"listId\"]}}",
              "type": "string"
            },
            {
              "id": "fe7f7133-3263-48ee-be1f-21549ad6c757",
              "name": "catalog",
              "value": "={{$node[\"Split Location\"].json[\"resolverUrl\"]}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3520,
        416
      ],
      "id": "9548e483-b4a7-4b15-a439-45dd265950f1",
      "name": "Pass Location Info1"
    },
    {
      "parameters": {
        "url": "https://api.constantcontact.com/v3/contact_lists?limit=1",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2400,
        96
      ],
      "id": "b4f6d68d-4cc6-4475-b811-8e53610c6a8c",
      "name": "HTTP Request",
      "credentials": {
        "oAuth2Api": {
          "id": "9Ul5c97KvhvrQElH",
          "name": "Unnamed credential 2"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 6,
              "triggerAtMinute": 30
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        2400,
        320
      ],
      "id": "49c42a5f-3d00-45cc-8399-a6fcdec87ec6",
      "name": "Morning"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "464d3923-6dd2-404f-8470-a59941fd9130",
              "name": "locations",
              "value": "[   {     \"name\": \"Dallas\",     \"city\": \"Dallas\",     \"resolverUrl\": \"https://dallas.hibid.com/company/17475/river-city-auction\",     \"listId\": \"LIST_ID_DALLAS\"   },   {     \"name\": \"Houston\",     \"city\": \"Houston\",     \"resolverUrl\": \"https://houston.hibid.com/company/17475/river-city-auction\",     \"listId\": \"LIST_ID_HOUSTON\"   },   {     \"name\": \"Sacramento\",     \"city\": \"Sacramento\",     \"resolverUrl\": \"https://rivercityfurnitureauction.hibid.com/\",     \"listId\": \"LIST_ID_SACRAMENTO\"   },   {     \"name\": \"Indiana\",     \"city\": \"Indiana\",     \"resolverUrl\": \"https://greatlakes.hibid.com/company/17475/river-city-auction\",     \"listId\": \"LIST_ID_INDIANA\"   } ]",
              "type": "array"
            }
          ]
        },
        "options": {
          "dotNotation": false
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2624,
        416
      ],
      "id": "2e6a4854-6ccf-41eb-b9ab-e345c9ffb775",
      "name": "Set Locations"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Split Location (robust)\n * Input:  { locations: [ { name, city, resolverUrl, listId }, ... ] }\n * Output: one item per location with name, city, resolverUrl, listId\n */\nfunction s(v) { return (v == null ? '' : String(v)).trim(); }\n\n// Accept array from Set Locations\nconst locs = Array.isArray($json.locations) ? $json.locations : [];\n\nif (!Array.isArray(locs) || locs.length === 0) {\n  throw new Error('Split Location: expected array field \"locations\" from Set Locations.');\n}\n\n// Map of default resolver URLs if you donâ€™t want to type them in Set Locations\nconst ORIGIN_BY_CITY = {\n  dallas: 'https://dallas.hibid.com',\n  houston: 'https://houston.hibid.com',\n  sacramento: 'https://rivercityfurnitureauction.hibid.com',\n  indiana: 'https://greatlakes.hibid.com',\n  indy: 'https://greatlakes.hibid.com'\n};\n\nreturn locs.map(raw => {\n  const name   = s(raw.name);\n  const city   = s(raw.city || raw.name);\n  const listId = s(raw.listId);\n\n  let resolver = s(raw.resolverUrl);\n  if (!resolver) {\n    resolver = ORIGIN_BY_CITY[city.toLowerCase()] || '';\n  }\n\n  return { json: { name, city, resolverUrl: resolver, listId } };\n});\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2848,
        416
      ],
      "id": "f2490f6c-503d-49d6-a88d-b13b5db01c61",
      "name": "Split Location"
    },
    {
      "parameters": {
        "url": "={{$json.resolverUrl}}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text",
              "outputPropertyName": "html"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3072,
        416
      ],
      "id": "0cbb4721-d2f3-40b8-b880-d55090618faf",
      "name": "Fetch Resolver Page",
      "notesInFlow": false,
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "operation": "extractHtmlContent",
        "dataPropertyName": "html",
        "extractionValues": {
          "values": [
            {
              "key": "auctionLink",
              "cssSelector": "a[href*=\"/catalog/\"]",
              "returnValue": "attribute",
              "attribute": "href",
              "returnArray": true
            },
            {
              "key": "auctionTitle",
              "cssSelector": "a[href*=\"/catalog/\"]",
              "returnArray": true
            },
            {
              "key": "auctionTitle",
              "cssSelector": "a[href*=\"/catalog/\"], .auction a[href*=\"/catalog/\"], .auction-item a[href*=\"/catalog/\"]",
              "returnArray": true
            },
            {
              "key": "auctionLink",
              "cssSelector": "a[href*=\"/catalog/\"], .auction a[href*=\"/catalog/\"], .auction-item a[href*=\"/catalog/\"]",
              "returnArray": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        3296,
        416
      ],
      "id": "f5a0f70d-c612-4932-b0c6-8f370ce27ce6",
      "name": "Extract Catalog Links"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "weeks",
              "triggerAtDay": [
                1,
                4
              ],
              "triggerAtHour": 18,
              "triggerAtMinute": 20
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        2400,
        512
      ],
      "id": "779dbf9f-46ea-4c84-a7ad-bed1e94fe1c0",
      "name": "Evening"
    },
    {
      "parameters": {
        "jsCode": "const N = 12; // keep top N items\n\n// Make relative links absolute against the catalog URL\nconst toAbs = (u, baseUrl) => {\n  if (!u) return '';\n  if (/^https?:\\/\\//i.test(u)) return u;\n  try {\n    const base = new URL(baseUrl);\n    return new URL(u, base.origin).href;\n  } catch {\n    return u;\n  }\n};\n\nconst links  = $json.itemLink  || [];\nconst imgs   = $json.imgSrc    || [];\nconst titles = $json.itemTitle || [];\nconst prices = $json.price     || [];\n\nconst items = [];\nfor (let i = 0; i < titles.length; i++) {\n  const title = (titles[i] || '').trim();\n  const href = toAbs(links[i], $json.catalogUrl);\n  const imageUrl = toAbs(imgs[i], $json.catalogUrl);\n  const price = (prices[i] || '').trim();\n  if (title && href && imageUrl) {\n    items.push({ title, href, imageUrl, price });\n  }\n}\n\nreturn [{\n  ...$json,                   // keep name, city, listId, catalogUrl\n  items: items.slice(0, N)    // limit email length\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4416,
        416
      ],
      "id": "c87216f0-3873-4365-9cda-5c7c47de48c3",
      "name": "Build Item List"
    },
    {
      "parameters": {
        "operation": "extractHtmlContent",
        "dataPropertyName": "html",
        "extractionValues": {
          "values": [
            {
              "cssSelector": "a[href*=\"/lot/\"]",
              "returnValue": "attribute",
              "attribute": "href",
              "returnArray": true
            },
            {
              "cssSelector": ".auction-item img, img.lot-image, img[src*=\"/lotimage/\"], img[src*=\"/lotimages/\"]",
              "returnValue": "attribute",
              "attribute": "src",
              "returnArray": true
            },
            {
              "cssSelector": ".lot-title, .item-title, a.lot-title, a[href*=\"/lot/\"]",
              "returnArray": true
            },
            {
              "cssSelector": ".current-bid, .price",
              "returnArray": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        4192,
        416
      ],
      "id": "d14e8550-4a70-457a-bc9a-7a9479eff191",
      "name": "Extract Lots",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "jsCode": "/**\n * Render Email HTML\n * Inputs expected on $json:\n *   name        -> city name (e.g., \"Dallas\")\n *   listId      -> Constant Contact list id for the city\n *   catalogUrl  -> resolved catalog URL for the city\n *   items[]     -> array of { title, href, imageUrl, price }\n *   subject?    -> optional subject from AI node\n *   intro?      -> optional intro line from AI node\n *   isMorning?  -> optional flag to tweak UTM & tone\n *\n * Outputs on $json:\n *   email_html  -> full HTML (custom code) for Constant Contact\n *   subject     -> final subject line\n *   preheader   -> short preview text\n *\n * Notes:\n * - Includes [[trackingImage]] for Constant Contact open tracking.\n * - Adds basic UTM params to item links for AM/PM and city tracking.\n * - Mobile-safe single-column layout (wide compatibility).\n */\n\nconst city       = ($json.name || 'Auction').trim();\nconst items      = Array.isArray($json.items) ? $json.items : [];\nconst isMorning  = !!$json.isMorning; // if you set this earlier\nconst catalogUrl = $json.catalogUrl || '';\n\n/* ---------- helpers ---------- */\nfunction esc(s = '') {\n  return String(s)\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;');\n}\n\nfunction ensureAbs(u) {\n  if (!u) return '';\n  if (/^https?:\\/\\//i.test(u)) return u;\n  try {\n    const base = new URL(catalogUrl || 'https://rivercityfurnitureauction.hibid.com/');\n    return new URL(u, base).href;\n  } catch {\n    return u;\n  }\n}\n\nfunction addUtm(u, citySlug, when) {\n  const url = ensureAbs(u);\n  const sep = url.includes('?') ? '&' : '?';\n  return `${url}${sep}utm_source=cc&utm_medium=email&utm_campaign=auction_${citySlug}_${when}`;\n}\n\nfunction pick(arr = [], n = 12) {\n  return arr.slice(0, n);\n}\n\nfunction words(s = '', max = 25) {\n  const parts = s.split(/\\s+/).filter(Boolean);\n  return parts.slice(0, max).join(' ');\n}\n\nconst citySlug = city.toLowerCase().replace(/\\s+/g, '-');\nconst whenTag  = isMorning ? 'am' : 'pm';\n\n/* ---------- subject + intro + preheader ---------- */\nlet subject = ($json.subject || '').trim();\nif (!subject) {\n  const opts = [\n    `${city} Auction Highlights`,\n    `${city} Fresh Finds Today`,\n    `${city} Deals Youâ€™ll Love`,\n    `${city} Top Picks Right Now`,\n  ];\n  subject = opts[Math.floor(Math.random() * opts.length)];\n}\n// keep subject to ~8 words, just in case\nsubject = words(subject, 8);\n\nlet intro = ($json.intro || '').trim();\nif (!intro) {\n  const top = pick(items, 3).map(i => i.title).filter(Boolean);\n  const sample = top.join(', ');\n  intro = isMorning\n    ? `Early picks in ${city}: ${sample}.`\n    : `Tonight in ${city}: ${sample}.`;\n}\nintro = words(intro, 25);\n\nconst preheader = words(\n  items.length\n    ? `New lots in ${city}. Pickup available. No reserves.`\n    : `Browse ${city} auction items now.`,\n  18\n);\n\n/* ---------- build item cards (single column for max compatibility) ---------- */\nconst cardsHTML = pick(items, 12).map((i) => {\n  const title = esc(i.title || '');\n  const price = (i.price || '').trim();\n  const href  = addUtm(i.href || '#', citySlug, whenTag);\n  const img   = ensureAbs(i.imageUrl || '');\n\n  return `\n  <tr>\n    <td style=\"padding:12px 0;\">\n      <a href=\"${esc(href)}\" target=\"_blank\">\n        <img src=\"${esc(img)}\" alt=\"${title}\" style=\"width:100%;max-width:560px;display:block;border:0;outline:0;text-decoration:none;\" />\n      </a>\n      <div style=\"font:14px Arial, Helvetica, sans-serif;margin-top:8px;color:#111;line-height:1.4;\">\n        <strong>${title}</strong><br/>\n        ${price ? `<span>${esc(price)}</span><br/>` : ``}\n        <a href=\"${esc(href)}\" target=\"_blank\" style=\"text-decoration:underline;color:#1155cc;\">View on HiBid â†’</a>\n      </div>\n    </td>\n  </tr>`;\n}).join('\\n');\n\n/* ---------- final HTML (custom code email) ---------- */\nconst email_html = `<!doctype html>\n<html>\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n    <title>${esc(subject)}</title>\n    <!-- Basic, email-safe styles only -->\n  </head>\n  <body style=\"margin:0;padding:0;background:#ffffff;\">\n    [[trackingImage]]\n    <center>\n      <table role=\"presentation\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"max-width:600px;margin:0 auto;\">\n        <tr>\n          <td style=\"padding:18px 14px 8px 14px;font:22px Arial, Helvetica, sans-serif;color:#111;\">\n            ${esc(subject)}\n          </td>\n        </tr>\n\n        <tr>\n          <td style=\"padding:0 14px 16px 14px;font:16px Arial, Helvetica, sans-serif;color:#444;line-height:1.5;\">\n            ${esc(intro)}\n          </td>\n        </tr>\n\n        <tr>\n          <td style=\"padding:0 14px;\">\n            <table role=\"presentation\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n              ${cardsHTML || `\n              <tr><td style=\"padding:12px 0;font:14px Arial, Helvetica, sans-serif;color:#555;\">\n                No items found. Please check back soon.\n              </td></tr>`}\n            </table>\n          </td>\n        </tr>\n\n        <tr>\n          <td style=\"padding:18px 14px 28px 14px;font:12px Arial, Helvetica, sans-serif;color:#777;line-height:1.4;\">\n            Youâ€™re receiving this because you opted in at River City Furniture Auction.\n            Pickup required; no shipping unless noted. Unsubscribe via the link in the footer.\n          </td>\n        </tr>\n      </table>\n    </center>\n  </body>\n</html>`;\n\n/* ---------- return ---------- */\nreturn [{\n  ...$json,\n  email_html,\n  subject,\n  preheader\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5216,
        416
      ],
      "id": "bca666dc-a1c8-447f-96e1-826ac59b678b",
      "name": "Render Email HTML"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.constantcontact.com/v3/emails",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "={\n  \"name\": \"{{$json.name}} | Daily Highlights {{ (new Date()).toISOString().slice(0,10) }}\",\n  \"email_campaign_activities\": [\n    {\n      \"format_type\": 5,\n      \"from_name\": \"River City Furniture Auction\",\n      \"from_email\": \"rivercityfurnitureauction@gmail.com\",\n      \"reply_to_email\": \"rivercityfurnitureauction@gmail.com\",\n      \"subject\": \"{{$json.subject}}\",\n      \"preheader\": \"{{$json.preheader}}\",\n      \"html_content\": \"{{$json.email_html}}\"\n    }\n  ]\n}\n",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"name\": \"{{$json.name}} | Auction {{ (new Date()).toISOString().slice(0,10) }}\",\n  \"email_campaign_activities\": [\n    {\n      \"format_type\": 5,\n      \"from_name\": \"River City Furniture Auction\",\n      \"from_email\": \"rivercityfurnitureauction@gmail.com\",\n      \"reply_to_email\": \"rivercityfurnitureauction@gmail.com\",\n      \"subject\": \"{{$json.subject}}\",\n      \"preheader\": \"{{$json.preheader}}\",\n      \"html_content\": \"{{$json.email_html}}\"\n    }\n  ]\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        5440,
        416
      ],
      "id": "ca5243ec-fab6-4f35-94d5-a135f3ed4ee6",
      "name": "CC â€” Create Email",
      "credentials": {
        "oAuth2Api": {
          "id": "9Ul5c97KvhvrQElH",
          "name": "Unnamed credential 2"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b7ac5f9e-8a96-49c1-8aee-112176cd7522",
              "name": "activityId",
              "value": "={{$json[\"email_campaign_activities\"][0][\"campaign_activity_id\"]}}",
              "type": "string"
            },
            {
              "id": "d321d5a8-0b28-4d21-8aad-7fd24c0698e1",
              "name": "listId",
              "value": "={{$json.listId}}",
              "type": "string"
            },
            {
              "id": "01df2a60-433f-4d78-bcb5-b6dce1e60f62",
              "name": "subject",
              "value": "={{$json.subject}}",
              "type": "string"
            },
            {
              "id": "eba6c5a4-7cfd-4cbe-a25c-8149c5920986",
              "name": "email_html",
              "value": "={{$json.email_html}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        5664,
        416
      ],
      "id": "af2de749-5382-4c28-bdf0-c3b8b66d7fb5",
      "name": "Pick Activity ID"
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "=https://api.cc.email/v3/emails/activities/{{$json[\"email_campaign_activities\"][0][\"campaign_activity_id\"]}}\n",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "={\n  \"Content-Type\": \"application/json\"\n}\n",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"campaign_activity_id\": \"{{$json[\"email_campaign_activities\"][0][\"campaign_activity_id\"]}}\",\n  \"role\": \"primary_email\",\n  \"format_type\": 5,\n  \"from_name\": \"River City Furniture Auction\",\n  \"from_email\": \"rivercityfurnitureauction@gmail.com\",\n  \"reply_to_email\": \"rivercityfurnitureauction@gmail.com\",\n  \"subject\": \"{{$json.subject}}\",\n  \"html_content\": \"{{$json.email_html}}\",\n  \"contact_list_ids\": [\"{{$json.listId}}\"]\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        5888,
        416
      ],
      "id": "1bc7114e-adde-4dea-82ae-46a15a68e6ad",
      "name": "CC â€” Update Activity (Add List)",
      "credentials": {
        "oAuth2Api": {
          "id": "9Ul5c97KvhvrQElH",
          "name": "Unnamed credential 2"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.constantcontact.com/v3/emails/activities/{{$json[\"email_campaign_activities\"][0][\"campaign_activity_id\"]}}/schedules\n",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"Content-Type\": \"application/json\"\n}\n",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{ \"scheduled_date\": \"2025-08-26T00:00:00Z\" }\n\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        6112,
        416
      ],
      "id": "2daab37e-2754-4b4d-b9a6-864a20ec7951",
      "name": "CC â€” Schedule Send",
      "credentials": {
        "oAuth2Api": {
          "id": "9Ul5c97KvhvrQElH",
          "name": "Unnamed credential 2"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "chatgpt-4o-latest",
          "mode": "list",
          "cachedResultName": "CHATGPT-4O-LATEST"
        },
        "messages": {
          "values": [
            {
              "content": "You are a concise marketing copywriter for a daily online auction. \nWrite punchy subjects (max 8 words) and one-line intros (max 25 words).\nThe subject MUST include the city name provided. Avoid repeating wording day to day.\nNever include emojis or ALL CAPS. Return a strict JSON object only.\n",
              "role": "=City: {{$json.name}}\nDate (ISO): {{(new Date()).toISOString().slice(0,10)}}\nTop items today: {{ ($json.items || []).slice(0,4).map(i => i.title).join(', ') }}\n\nWrite a JSON object with exactly these keys:\n{\n  \"subject\": \"string (â‰¤ 8 words, must include the city name at the start)\",\n  \"intro\": \"string (â‰¤ 25 words, natural tone, mention 1â€“2 of the items above)\"\n}\n"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        4640,
        416
      ],
      "id": "0109ebbf-bcc6-4cb0-b8b6-4c90753b2556",
      "name": "Message a model",
      "credentials": {
        "openAiApi": {
          "id": "7PxQv2DDaJCBSarn",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// n8n OpenAI node typically returns content at $json.choices[0].message.content\n// but weâ€™ll guard for other shapes too.\nlet raw = $json;\nlet content =\n  raw?.choices?.[0]?.message?.content ??\n  raw?.data?.choices?.[0]?.message?.content ??\n  (typeof raw === 'string' ? raw : '');\n\nlet subject = '';\nlet intro = '';\n\ntry {\n  const obj = JSON.parse(content);\n  subject = (obj.subject || '').trim();\n  intro   = (obj.intro || '').trim();\n} catch (e) {\n  // Fallback: try to extract \"subject:\" and \"intro:\" lines if JSON wasnâ€™t clean\n  const s = /\"subject\"\\s*:\\s*\"([^\"]+)\"/i.exec(content);\n  const i = /\"intro\"\\s*:\\s*\"([^\"]+)\"/i.exec(content);\n  subject = s ? s[1] : '';\n  intro   = i ? i[1] : '';\n}\n\n// Enforce city at start, uniqueness, and length limits\nconst city = $json.name || '';\nfunction startsWithCity(str, cityName) {\n  return str.toLowerCase().startsWith(cityName.toLowerCase());\n}\nfunction trimWords(str, maxWords) {\n  const parts = (str || '').split(/\\s+/).filter(Boolean);\n  return parts.slice(0, maxWords).join(' ');\n}\nif (!startsWithCity(subject, city)) {\n  subject = `${city} ${subject}`;\n}\nsubject = trimWords(subject, 8);\n\n// Guarantee subjects differ across locations by including city code\n// (since city is at the start, each location's subject is inherently different).\n// But also ensure no empties:\nif (!subject) subject = `${city} Auction Highlights`;\nif (!intro)   intro   = `Fresh picks in ${city} today.`;\n\nreturn [{\n  ...$json,\n  subject,\n  intro\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4992,
        416
      ],
      "id": "6f1779d1-95a5-4ad4-943e-d345e44425e7",
      "name": "Parse AI Subject & Intro"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Choose Current Catalog (runOnceForAllItems version)\n * Input: array of items, each with auctionLink, auctionTitle, city/name\n * Output: Array with catalogUrl attached per item\n */\n\nconst items = $input.all();\nconst ORIGIN_BY_CITY = {\n  dallas:     'https://dallas.hibid.com',\n  houston:    'https://houston.hibid.com',\n  sacramento: 'https://rivercityfurnitureauction.hibid.com/',\n  indiana:    'https://greatlakes.hibid.com',\n  indy:       'https://greatlakes.hibid.com'\n};\n\nreturn items\n  .map(item => {\n    const cityRaw = (item.json.city || item.json.name || '').trim();\n    const city = cityRaw.toLowerCase();\n    let links  = item.json.auctionLink  || [];\n    let titles = item.json.auctionTitle || [];\n\n    // Ensure links and titles are always arrays\n    if (!Array.isArray(links))  links = links ? [links] : [];\n    if (!Array.isArray(titles)) titles = titles ? [titles] : [];\n\n    // Pick link whose title contains the city, fallback to first\n    let chosen = null;\n    for (let i = 0; i < links.length; i++) {\n      const t = String(titles[i] || '').toLowerCase();\n      if (city && t.includes(city)) {\n        chosen = links[i];\n        break;\n      }\n    }\n    if (!chosen && links.length) chosen = links[0];\n    if (!chosen) return null;\n\n    let path = String(chosen).trim();\n    let catalogUrl;\n    if (/^https?:\\/\\//i.test(path)) {\n      catalogUrl = path;\n    } else {\n      const origin = ORIGIN_BY_CITY[city];\n      if (!origin) throw new Error(`No origin mapped for city \"${cityRaw}\"`);\n      catalogUrl = origin + (path.startsWith('/') ? path : '/' + path);\n    }\n\n    try {\n      catalogUrl = new URL(catalogUrl).href;\n    } catch {\n      return null;\n    }\n\n    return { ...item, json: { ...item.json, catalogUrl } };\n  })\n  .filter(item => item !== null);"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3744,
        432
      ],
      "id": "233eb63d-08fc-44d3-963e-3e5e6128a147",
      "name": "Choose Current Catalog"
    },
    {
      "parameters": {
        "url": "={{$json.catalogUrl}}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text",
              "outputPropertyName": "html"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3968,
        416
      ],
      "id": "043f5747-2be3-44a5-a91e-17064f8db84d",
      "name": "Fetch Catalog"
    }
  ],
  "pinData": {},
  "connections": {
    "Pass Location Info1": {
      "main": [
        [
          {
            "node": "Choose Current Catalog",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Morning": {
      "main": [
        [
          {
            "node": "Set Locations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Locations": {
      "main": [
        [
          {
            "node": "Split Location",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Location": {
      "main": [
        [
          {
            "node": "Fetch Resolver Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Resolver Page": {
      "main": [
        [
          {
            "node": "Extract Catalog Links",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Catalog Links": {
      "main": [
        [
          {
            "node": "Pass Location Info1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Evening": {
      "main": [
        [
          {
            "node": "Set Locations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Item List": {
      "main": [
        [
          {
            "node": "Message a model",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Lots": {
      "main": [
        [
          {
            "node": "Build Item List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Render Email HTML": {
      "main": [
        [
          {
            "node": "CC â€” Create Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CC â€” Create Email": {
      "main": [
        [
          {
            "node": "Pick Activity ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pick Activity ID": {
      "main": [
        [
          {
            "node": "CC â€” Update Activity (Add List)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CC â€” Update Activity (Add List)": {
      "main": [
        [
          {
            "node": "CC â€” Schedule Send",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model": {
      "main": [
        [
          {
            "node": "Parse AI Subject & Intro",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse AI Subject & Intro": {
      "main": [
        [
          {
            "node": "Render Email HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Choose Current Catalog": {
      "main": [
        [
          {
            "node": "Fetch Catalog",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Catalog": {
      "main": [
        [
          {
            "node": "Extract Lots",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "f773a44c-883e-4277-b575-e495c882a876",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "28deb88c8712c76659afb08e6c8c4d238b4b31b6137eabce7a182ee77c96db3f"
  },
  "id": "6YzFFkzTNCEUL39d",
  "tags": []
}