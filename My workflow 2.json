{
  "name": "My workflow 2",
  "nodes": [
    {
      "parameters": {
        "url": "https://api.constantcontact.com/v3/contact_lists?limit=1",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2432,
        16
      ],
      "id": "fd17bffa-b258-48e2-90a6-ed99f6b09cb0",
      "name": "HTTP Request",
      "credentials": {
        "oAuth2Api": {
          "id": "9Ul5c97KvhvrQElH",
          "name": "Unnamed credential 2"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 6,
              "triggerAtMinute": 30
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        2432,
        464
      ],
      "id": "3d00832e-4b78-4f3d-b35b-4eda65dedf6c",
      "name": "Morning"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "weeks",
              "triggerAtDay": [
                1,
                4
              ],
              "triggerAtHour": 18,
              "triggerAtMinute": 20
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        2432,
        656
      ],
      "id": "c3c0f1d8-2507-41e1-ae85-9f3eda6be1fc",
      "name": "Evening"
    },
    {
      "parameters": {
        "jsCode": "const N = 12; // keep top N items\n\n// Make relative links absolute against the catalog URL\nconst toAbs = (u, baseUrl) => {\n  if (!u) return '';\n  if (/^https?:\\/\\//i.test(u)) return u;\n  try {\n    const base = new URL(baseUrl);\n    return new URL(u, base.origin).href;\n  } catch {\n    return u;\n  }\n};\n\nconst links  = $json.itemLink  || [];\nconst imgs   = $json.imgSrc    || [];\nconst titles = $json.itemTitle || [];\nconst prices = $json.price     || [];\n\nconst items = [];\nfor (let i = 0; i < titles.length; i++) {\n  const title = (titles[i] || '').trim();\n  const href = toAbs(links[i], $json.catalogUrl);\n  const imageUrl = toAbs(imgs[i], $json.catalogUrl);\n  const price = (prices[i] || '').trim();\n  if (title && href && imageUrl) {\n    items.push({ title, href, imageUrl, price });\n  }\n}\n\nreturn [{\n  ...$json,                   // keep name, city, listId, catalogUrl\n  items: items.slice(0, N)    // limit email length\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4448,
        560
      ],
      "id": "51db1dbe-0fac-44eb-ac69-9b9a2b1a5549",
      "name": "Build Item List"
    },
    {
      "parameters": {
        "operation": "extractHtmlContent",
        "dataPropertyName": "html",
        "extractionValues": {
          "values": [
            {
              "cssSelector": "a[href*=\"/lot/\"]",
              "returnValue": "attribute",
              "attribute": "href",
              "returnArray": true
            },
            {
              "cssSelector": ".auction-item img, img.lot-image, img[src*=\"/lotimage/\"], img[src*=\"/lotimages/\"]",
              "returnValue": "attribute",
              "attribute": "src",
              "returnArray": true
            },
            {
              "cssSelector": ".lot-title, .item-title, a.lot-title, a[href*=\"/lot/\"]",
              "returnArray": true
            },
            {
              "cssSelector": ".current-bid, .price",
              "returnArray": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        2944,
        -32
      ],
      "id": "d96fba8c-fec6-4b40-a688-ce8f555f2b0f",
      "name": "Extract Lots",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "jsCode": "/**\n * Render Email HTML\n * Inputs expected on $json:\n *   name        -> city name (e.g., \"Dallas\")\n *   listId      -> Constant Contact list id for the city\n *   catalogUrl  -> resolved catalog URL for the city\n *   items[]     -> array of { title, href, imageUrl, price }\n *   subject?    -> optional subject from AI node\n *   intro?      -> optional intro line from AI node\n *   isMorning?  -> optional flag to tweak UTM & tone\n *\n * Outputs on $json:\n *   email_html  -> full HTML (custom code) for Constant Contact\n *   subject     -> final subject line\n *   preheader   -> short preview text\n *\n * Notes:\n * - Includes [[trackingImage]] for Constant Contact open tracking.\n * - Adds basic UTM params to item links for AM/PM and city tracking.\n * - Mobile-safe single-column layout (wide compatibility).\n */\n\nconst city       = ($json.name || 'Auction').trim();\nconst items      = Array.isArray($json.items) ? $json.items : [];\nconst isMorning  = !!$json.isMorning; // if you set this earlier\nconst catalogUrl = $json.catalogUrl || '';\n\n/* ---------- helpers ---------- */\nfunction esc(s = '') {\n  return String(s)\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;');\n}\n\nfunction ensureAbs(u) {\n  if (!u) return '';\n  if (/^https?:\\/\\//i.test(u)) return u;\n  try {\n    const base = new URL(catalogUrl || 'https://rivercityfurnitureauction.hibid.com/');\n    return new URL(u, base).href;\n  } catch {\n    return u;\n  }\n}\n\nfunction addUtm(u, citySlug, when) {\n  const url = ensureAbs(u);\n  const sep = url.includes('?') ? '&' : '?';\n  return `${url}${sep}utm_source=cc&utm_medium=email&utm_campaign=auction_${citySlug}_${when}`;\n}\n\nfunction pick(arr = [], n = 12) {\n  return arr.slice(0, n);\n}\n\nfunction words(s = '', max = 25) {\n  const parts = s.split(/\\s+/).filter(Boolean);\n  return parts.slice(0, max).join(' ');\n}\n\nconst citySlug = city.toLowerCase().replace(/\\s+/g, '-');\nconst whenTag  = isMorning ? 'am' : 'pm';\n\n/* ---------- subject + intro + preheader ---------- */\nlet subject = ($json.subject || '').trim();\nif (!subject) {\n  const opts = [\n    `${city} Auction Highlights`,\n    `${city} Fresh Finds Today`,\n    `${city} Deals You’ll Love`,\n    `${city} Top Picks Right Now`,\n  ];\n  subject = opts[Math.floor(Math.random() * opts.length)];\n}\n// keep subject to ~8 words, just in case\nsubject = words(subject, 8);\n\nlet intro = ($json.intro || '').trim();\nif (!intro) {\n  const top = pick(items, 3).map(i => i.title).filter(Boolean);\n  const sample = top.join(', ');\n  intro = isMorning\n    ? `Early picks in ${city}: ${sample}.`\n    : `Tonight in ${city}: ${sample}.`;\n}\nintro = words(intro, 25);\n\nconst preheader = words(\n  items.length\n    ? `New lots in ${city}. Pickup available. No reserves.`\n    : `Browse ${city} auction items now.`,\n  18\n);\n\n/* ---------- build item cards (single column for max compatibility) ---------- */\nconst cardsHTML = pick(items, 12).map((i) => {\n  const title = esc(i.title || '');\n  const price = (i.price || '').trim();\n  const href  = addUtm(i.href || '#', citySlug, whenTag);\n  const img   = ensureAbs(i.imageUrl || '');\n\n  return `\n  <tr>\n    <td style=\"padding:12px 0;\">\n      <a href=\"${esc(href)}\" target=\"_blank\">\n        <img src=\"${esc(img)}\" alt=\"${title}\" style=\"width:100%;max-width:560px;display:block;border:0;outline:0;text-decoration:none;\" />\n      </a>\n      <div style=\"font:14px Arial, Helvetica, sans-serif;margin-top:8px;color:#111;line-height:1.4;\">\n        <strong>${title}</strong><br/>\n        ${price ? `<span>${esc(price)}</span><br/>` : ``}\n        <a href=\"${esc(href)}\" target=\"_blank\" style=\"text-decoration:underline;color:#1155cc;\">View on HiBid →</a>\n      </div>\n    </td>\n  </tr>`;\n}).join('\\n');\n\n/* ---------- final HTML (custom code email) ---------- */\nconst email_html = `<!doctype html>\n<html>\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n    <title>${esc(subject)}</title>\n    <!-- Basic, email-safe styles only -->\n  </head>\n  <body style=\"margin:0;padding:0;background:#ffffff;\">\n    [[trackingImage]]\n    <center>\n      <table role=\"presentation\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"max-width:600px;margin:0 auto;\">\n        <tr>\n          <td style=\"padding:18px 14px 8px 14px;font:22px Arial, Helvetica, sans-serif;color:#111;\">\n            ${esc(subject)}\n          </td>\n        </tr>\n\n        <tr>\n          <td style=\"padding:0 14px 16px 14px;font:16px Arial, Helvetica, sans-serif;color:#444;line-height:1.5;\">\n            ${esc(intro)}\n          </td>\n        </tr>\n\n        <tr>\n          <td style=\"padding:0 14px;\">\n            <table role=\"presentation\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n              ${cardsHTML || `\n              <tr><td style=\"padding:12px 0;font:14px Arial, Helvetica, sans-serif;color:#555;\">\n                No items found. Please check back soon.\n              </td></tr>`}\n            </table>\n          </td>\n        </tr>\n\n        <tr>\n          <td style=\"padding:18px 14px 28px 14px;font:12px Arial, Helvetica, sans-serif;color:#777;line-height:1.4;\">\n            You’re receiving this because you opted in at River City Furniture Auction.\n            Pickup required; no shipping unless noted. Unsubscribe via the link in the footer.\n          </td>\n        </tr>\n      </table>\n    </center>\n  </body>\n</html>`;\n\n/* ---------- return ---------- */\nreturn [{\n  ...$json,\n  email_html,\n  subject,\n  preheader\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5248,
        560
      ],
      "id": "7ede42ff-baf8-4878-84a4-012b622ed63a",
      "name": "Render Email HTML"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.constantcontact.com/v3/emails",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "={\n  \"Content-Type\": \"application/json\"\n}\n",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"name\": \"{{$json.name || 'Auction'}} | Daily Highlights {{ (new Date()).toISOString().slice(0,10) }}\",\n  \"email_campaign_activities\": [\n    {\n      \"format_type\": 5,\n      \"from_name\": \"River City Furniture Auction\",\n      \"from_email\": \"rivercityfurnitureauction@gmail.com\",\n      \"reply_to_email\": \"rivercityfurnitureauction@gmail.com\",\n      \"subject\": \"{{$json.subject || ''}}\",\n      \"preheader\": \"{{$json.preheader || ''}}\",\n      \"html_content\": \"{{$json.email_html || ''}}\"\n    }\n  ]\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        5472,
        560
      ],
      "id": "a7cc2231-a790-4076-b53c-4121ff22489d",
      "name": "CC — Create Email",
      "credentials": {
        "oAuth2Api": {
          "id": "9Ul5c97KvhvrQElH",
          "name": "Unnamed credential 2"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b7ac5f9e-8a96-49c1-8aee-112176cd7522",
              "name": "activityId",
              "value": "={{$json[\"email_campaign_activities\"][0][\"campaign_activity_id\"]}}",
              "type": "string"
            },
            {
              "id": "d321d5a8-0b28-4d21-8aad-7fd24c0698e1",
              "name": "listId",
              "value": "={{$json.listId}}",
              "type": "string"
            },
            {
              "id": "01df2a60-433f-4d78-bcb5-b6dce1e60f62",
              "name": "subject",
              "value": "={{$json.subject}}",
              "type": "string"
            },
            {
              "id": "eba6c5a4-7cfd-4cbe-a25c-8149c5920986",
              "name": "email_html",
              "value": "={{$json.email_html}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        5696,
        560
      ],
      "id": "e3c8536a-905e-40cd-86ad-2bee5386f3c2",
      "name": "Pick Activity ID"
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "=https://api.cc.email/v3/emails/activities/{{$json[\"email_campaign_activities\"][0][\"campaign_activity_id\"]}}\n",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "={\n  \"Content-Type\": \"application/json\"\n}\n",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"campaign_activity_id\": \"{{$json[\"email_campaign_activities\"][0][\"campaign_activity_id\"]}}\",\n  \"role\": \"primary_email\",\n  \"format_type\": 5,\n  \"from_name\": \"River City Furniture Auction\",\n  \"from_email\": \"rivercityfurnitureauction@gmail.com\",\n  \"reply_to_email\": \"rivercityfurnitureauction@gmail.com\",\n  \"subject\": \"{{$json.subject}}\",\n  \"html_content\": \"{{$json.email_html}}\",\n  \"contact_list_ids\": [\"{{$json.listId}}\"]\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        5920,
        560
      ],
      "id": "b09ba46e-3867-4f58-8d8b-8b8700051446",
      "name": "CC — Update Activity (Add List)",
      "credentials": {
        "oAuth2Api": {
          "id": "9Ul5c97KvhvrQElH",
          "name": "Unnamed credential 2"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.constantcontact.com/v3/emails/activities/{{$json[\"email_campaign_activities\"][0][\"campaign_activity_id\"]}}/schedules\n",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"Content-Type\": \"application/json\"\n}\n",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{ \"scheduled_date\": \"2025-08-26T00:00:00Z\" }\n\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        6144,
        560
      ],
      "id": "e6b0b886-a27b-4b13-88e2-316a40b80a9b",
      "name": "CC — Schedule Send",
      "credentials": {
        "oAuth2Api": {
          "id": "9Ul5c97KvhvrQElH",
          "name": "Unnamed credential 2"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "chatgpt-4o-latest",
          "mode": "list",
          "cachedResultName": "CHATGPT-4O-LATEST"
        },
        "messages": {
          "values": [
            {
              "content": "You are a concise marketing copywriter for a daily online auction. \nWrite punchy subjects (max 8 words) and one-line intros (max 25 words).\nThe subject MUST include the city name provided. Avoid repeating wording day to day.\nNever include emojis or ALL CAPS. Return a strict JSON object only.\n",
              "role": "system"
            },
            {
              "content": "=City: {{$json.name}}\nDate (ISO): {{ (new Date()).toISOString().slice(0,10) }}\nTop items today: {{ ($json.items || []).slice(0,4).map(i => i.title).join(', ') }}\n\nReturn exactly:\n{\n  \"subject\": \"≤ 8 words, must start with the city\",\n  \"intro\": \"≤ 25 words, mention 1–2 of the items\"\n}"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        4672,
        560
      ],
      "id": "0abaccf2-1b87-44db-adad-df7880281000",
      "name": "Message a model",
      "credentials": {
        "openAiApi": {
          "id": "7PxQv2DDaJCBSarn",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Mode: Run Once For All Items (OK)\n// Input shape (from OpenAI node): { index, message: { role, content } }\n\nconst raw = $json;\n\n// Grab the content robustly across shapes\nconst content =\n  raw?.message?.content ??\n  raw?.choices?.[0]?.message?.content ??\n  raw?.data?.choices?.[0]?.message?.content ??\n  (typeof raw === 'string' ? raw : '');\n\nlet subject = '';\nlet intro = '';\n\n// Try JSON first, then fallback to regex\ntry {\n  const obj = JSON.parse(content);\n  subject = (obj.subject || '').trim();\n  intro   = (obj.intro   || '').trim();\n} catch {\n  const s = /\"subject\"\\s*:\\s*\"([^\"]+)\"/i.exec(content);\n  const i = /\"intro\"\\s*:\\s*\"([^\"]+)\"/i.exec(content);\n  subject = s ? s[1].trim() : '';\n  intro   = i ? i[1].trim() : '';\n}\n\n// Enforce city at start and 8-word cap\nconst city = ($json.name || '').trim();\nfunction startsWithCity(str, cityName) {\n  return str.toLowerCase().startsWith((cityName || '').toLowerCase());\n}\nfunction trimWords(str, max) {\n  return (str || '').split(/\\s+/).filter(Boolean).slice(0, max).join(' ');\n}\nif (!startsWithCity(subject, city)) subject = `${city} ${subject}`.trim();\nsubject = trimWords(subject, 8);\nif (!intro) intro = `Fresh picks in ${city} today.`;\n\n// IMPORTANT: strip reserved keys (like index) and wrap in { json: ... }\nconst { index, ...rest } = $json;\n\nreturn [{\n  json: {\n    ...rest,\n    subject,\n    intro\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5024,
        560
      ],
      "id": "fb65c485-012b-4cfa-816d-7f42f8ae65ef",
      "name": "Parse AI Subject & Intro"
    },
    {
      "parameters": {
        "url": "={{$json.catalogUrl}}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "Referer",
              "value": "https://rivercityfurnitureauction.com/"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": true,
              "neverError": true,
              "responseFormat": "text",
              "outputPropertyName": "html"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3312,
        -32
      ],
      "id": "6c483eb2-3de0-4b28-ac9b-a910343a0877",
      "name": "Fetch Catalog"
    },
    {
      "parameters": {
        "url": "https://rivercityfurnitureauction.com/",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text",
              "outputPropertyName": "html"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2656,
        560
      ],
      "id": "11ca27af-4046-41d3-8ef8-c5dc5bfbd39d",
      "name": "Fetch Homepage"
    },
    {
      "parameters": {
        "operation": "extractHtmlContent",
        "dataPropertyName": "html",
        "extractionValues": {
          "values": [
            {
              "key": "auctionLink",
              "cssSelector": "a.elementor-button",
              "returnValue": "attribute",
              "attribute": "href",
              "returnArray": true
            },
            {
              "key": "auctionText",
              "cssSelector": "a.elementor-button .elementor-button-text",
              "returnArray": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        2880,
        560
      ],
      "id": "27ecf87a-13ed-414e-b050-8f1809b837c4",
      "name": "Extract Homepage Auction Links"
    },
    {
      "parameters": {
        "jsCode": "// Expect: auctionLink[] and auctionText[] from the HTML Extract node\nconst links = $json.auctionLink || [];\nconst texts = $json.auctionText || [];\n\nconst LIST_BY_CITY = {\n  dallas:      'LIST_ID_DALLAS',\n  houston:     'LIST_ID_HOUSTON',\n  sacramento:  'LIST_ID_SACRAMENTO',\n  indiana:     'LIST_ID_INDIANA',\n  indianapolis:'LIST_ID_INDIANA', // treat Indianapolis as Indiana list\n};\n\nconst out = [];\n\nfor (let i = 0; i < Math.min(links.length, texts.length); i++) {\n  const href = String(links[i] || '').trim();\n  const text = String(texts[i] || '').trim();\n\n  // Pull the city name from the button text\n  // e.g., \"Browse Dallas Auction\" → \"Dallas\"\n  const m = text.match(/\\b(Sacramento|Dallas|Houston|Indianapolis|Indiana)\\b/i);\n  let city = m ? m[1] : text;\n  if (/^indianapolis$/i.test(city)) city = 'Indiana';\n\n  // Map to Constant Contact list\n  const listId = LIST_BY_CITY[city.toLowerCase()] || '';\n\n  // Output shape that downstream expects\n  out.push({\n    json: {\n      name: city,          // used as the city name in emails\n      city,                // for consistency\n      listId,              // audience list per city\n      catalogUrl: href     // <-- directly the HiBid catalog link\n    }\n  });\n}\n\nreturn out;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3104,
        560
      ],
      "id": "0c80d34a-31c3-4dca-9a5a-ebc6e4d44f03",
      "name": "Build Catalogs from Homepage"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Parse HiBid lots from the HTML by extracting the embedded\n * window.__INITIAL_STATE__ JSON and walking it for lot-like entries.\n * Output arrays: itemLink[], imgSrc[], itemTitle[], price[]\n * so your downstream \"Build Item List\" node keeps working unchanged.\n */\n\nfunction safeParseJSON(s) {\n  try { return JSON.parse(s); } catch { return null; }\n}\n\nconst html = $json.html || '';\nconst out = { itemLink: [], imgSrc: [], itemTitle: [], price: [] };\n\n// 1) Grab the embedded state blob\n// Typical pattern: window.__INITIAL_STATE__ = {...};\nconst m = html.match(/window\\.__INITIAL_STATE__\\s*=\\s*(\\{[\\s\\S]*?\\});/);\nif (!m) {\n  // Return empty arrays but keep flowing\n  return [{ ...$json, ...out, note: 'No __INITIAL_STATE__ found' }];\n}\n\nlet state = safeParseJSON(m[1]);\n// Some sites put \"undefined\" or trailing commas; try a cleanup pass if null\nif (!state) {\n  const cleaned = m[1]\n    .replace(/\\bundefined\\b/g, 'null')\n    .replace(/,\\s*}/g, '}')\n    .replace(/,\\s*]/g, ']');\n  state = safeParseJSON(cleaned);\n}\nif (!state || typeof state !== 'object') {\n  return [{ ...$json, ...out, note: 'STATE not parseable' }];\n}\n\n// 2) Walk the object to find arrays that look like lots\nconst candidates = [];\n\nfunction walk(obj) {\n  if (!obj) return;\n  if (Array.isArray(obj)) {\n    if (obj.length && typeof obj[0] === 'object') {\n      // Heuristic: lot-like objects tend to have a title/name AND an image or url\n      const hasTitleish = ['title','name','lotTitle','itemTitle'].some(k => k in obj[0]);\n      const hasMediaish = ['image','img','imageUrl','photo','thumbnail','lotImage'].some(k => k in obj[0]);\n      const hasUrlish   = ['url','href','lotUrl','link'].some(k => k in obj[0]);\n      if (hasTitleish && (hasMediaish || hasUrlish)) candidates.push(obj);\n    }\n    obj.forEach(walk);\n    return;\n  }\n  if (typeof obj === 'object') {\n    Object.values(obj).forEach(walk);\n  }\n}\nwalk(state);\n\n// Pick the largest plausible array (usually the lots)\nlet lots = [];\nfor (const arr of candidates) {\n  if (arr.length > lots.length) lots = arr;\n}\n\n// 3) Normalize fields\nconst toAbs = (u) => {\n  if (!u) return '';\n  if (/^https?:\\/\\//i.test(u)) return u;\n  try {\n    // base on the catalog page origin\n    const base = new URL($json.catalogUrl || 'https://hibid.com/');\n    return new URL(u, base.origin).href;\n  } catch { return u; }\n};\n\nfor (const it of lots) {\n  // Try several common field names; fall back gracefully\n  const title = String(\n    it.title ?? it.name ?? it.lotTitle ?? it.itemTitle ?? ''\n  ).trim();\n\n  const href  = toAbs(\n    it.href ?? it.url ?? it.lotUrl ?? it.link ?? ''\n  );\n\n  const img   = toAbs(\n    it.imageUrl ?? it.image ?? it.img ?? it.photo ?? it.thumbnail ?? ''\n  );\n\n  const price = String(\n    it.currentBidDisplay ?? it.priceDisplay ?? it.currentBid ?? it.price ?? ''\n  ).trim();\n\n  if (title && href && img) {\n    out.itemTitle.push(title);\n    out.itemLink.push(href);\n    out.imgSrc.push(img);\n    out.price.push(price);\n  }\n}\n\nreturn [{ ...$json, ...out }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3616,
        -48
      ],
      "id": "4bc7a056-de7e-4f41-9124-fe6fc3541fa1",
      "name": "Parse HiBid Lots"
    },
    {
      "parameters": {
        "jsCode": "const url = String($json.catalogUrl || '').trim();\nconst m = url.match(/\\/catalog\\/(\\d+)/);\nif (!m) return [{ ...$json, error: 'No catalogId in URL' }];\n\nreturn [{ ...$json, catalogId: m[1] }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3776,
        560
      ],
      "id": "7090db40-5358-445a-a922-e8c1a13fde63",
      "name": "Extract catalogId from catalogUrl"
    },
    {
      "parameters": {
        "url": "=https://hibid.com/lotlisting/catalog/{{$json.catalogId}}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "application/json,text/plain,*/*"
            },
            {
              "name": "Referer",
              "value": "lotsJson"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4000,
        560
      ],
      "id": "c14f39e0-8fa2-4b44-a794-252ca6071f89",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "jsCode": "const data = $json.lotsJson || {};\nlet rows = [];\n\n// Try common shapes; adjust if your response differs\nif (Array.isArray(data)) rows = data;\nif (Array.isArray(data?.items)) rows = data.items;\nif (Array.isArray(data?.results)) rows = data.results;\n\n// Normalize to what Build Item List expects\nconst items = rows.map(r => {\n  const title = String(r.title ?? r.name ?? r.lotTitle ?? '').trim();\n  const href  = String(r.url ?? r.lotUrl ?? r.href ?? '').trim();\n  const img   = String(r.imageUrl ?? r.image ?? r.photo ?? '').trim();\n  const price = String(r.currentBidDisplay ?? r.priceDisplay ?? r.currentBid ?? r.price ?? '').trim();\n  return { title, href, imageUrl: img, price };\n}).filter(x => x.title && x.href && x.imageUrl);\n\nreturn [{ ...$json, items }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4224,
        560
      ],
      "id": "60b1f1cf-5d2e-4ce0-866c-28a75085ef1f",
      "name": "Map JSON → items"
    }
  ],
  "pinData": {},
  "connections": {
    "Morning": {
      "main": [
        [
          {
            "node": "Fetch Homepage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Evening": {
      "main": [
        [
          {
            "node": "Fetch Homepage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Item List": {
      "main": [
        [
          {
            "node": "Message a model",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Lots": {
      "main": [
        []
      ]
    },
    "Render Email HTML": {
      "main": [
        [
          {
            "node": "CC — Create Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CC — Create Email": {
      "main": [
        [
          {
            "node": "Pick Activity ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pick Activity ID": {
      "main": [
        [
          {
            "node": "CC — Update Activity (Add List)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CC — Update Activity (Add List)": {
      "main": [
        [
          {
            "node": "CC — Schedule Send",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model": {
      "main": [
        [
          {
            "node": "Parse AI Subject & Intro",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse AI Subject & Intro": {
      "main": [
        [
          {
            "node": "Render Email HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Catalog": {
      "main": [
        []
      ]
    },
    "Fetch Homepage": {
      "main": [
        [
          {
            "node": "Extract Homepage Auction Links",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Homepage Auction Links": {
      "main": [
        [
          {
            "node": "Build Catalogs from Homepage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Catalogs from Homepage": {
      "main": [
        [
          {
            "node": "Extract catalogId from catalogUrl",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse HiBid Lots": {
      "main": [
        []
      ]
    },
    "Extract catalogId from catalogUrl": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Map JSON → items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Map JSON → items": {
      "main": [
        [
          {
            "node": "Build Item List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "549cd91c-85eb-4bba-b700-81b97abf9b3b",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "28deb88c8712c76659afb08e6c8c4d238b4b31b6137eabce7a182ee77c96db3f"
  },
  "id": "6YzFFkzTNCEUL39d",
  "tags": []
}